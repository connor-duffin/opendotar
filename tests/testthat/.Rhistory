?seq
t <- seq(0, 10, length = 1000L)
omega_low <- 1
omega_high <- 1000
t <- seq(0, 10, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x)
omega_low <- 1
omega_high <- 20
t <- seq(0, 10, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
?plot
omega_low <- 1
omega_high <- 20
t <- seq(0, 10, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
omega_low <- 1
omega_high <- 2
t <- seq(0, 10, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
omega_low <- 1
omega_high <- 16
t <- seq(0, 10, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
omega_low <- 1
omega_high <- 16
t <- seq(0, 10, length = 2000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
omega_low <- 1
omega_high <- 16
t <- seq(0, 1, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
omega_low <- 1
omega_high <- 32
t <- seq(0, 1, length = 1000L)
x <- sin(2 * pi * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
low_pass_filter <- function(x, alpha) {
y <- vector("numeric", length = length(x))
for (i in 2:length(x)) {
y[i] <- (1 - alpha) * x[i] + alpha * y[i - 1]
}
y
}
omega_low <- 1
omega_high <- 32
t <- seq(0, 1, length = 1000L)
x <- sin(2 * pi * omega_low * t) + 0.1 * sin(2 * pi * omega_high * t)
plot(t, x, type = "l")
# now, we try and filter out the higher-order frequency
alpha <- exp(-2 * pi * omega_high)
y <- low_pass_filter(x, alpha)
lines(t, y, color = "blue")
lines(t, y, c = "blue")
?lines
lines(t, y, col = "blue")
alpha <- exp(-2 * pi * omega_high)
print(alpha)
y <- low_pass_filter(x, alpha)
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.1)
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.1)
plot(t, x, type = "l")
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.9)
plot(t, x, type = "l")
lines(t, y, col = "blue")
alpha <- exp(-2 * pi * omega_high)
y <- low_pass_filter(x, alpha = 0.95)
plot(t, x, type = "l")
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.99)
plot(t, x, type = "l")
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.999)
plot(t, x, type = "l")
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.95)
plot(t, x, type = "l")
lines(t, y, col = "blue")
clear
clear()
low_pass_filter <- function(x, alpha) {
y <- vector("numeric", length = length(x))
for (i in 2:length(x)) {
y[i] <- (1 - alpha) * x[i] + alpha * y[i - 1]
}
y
}
omega_low <- 1
omega_high <- 32
t <- seq(0, 1, length = 1000L)
x <- sin(2 * pi * omega_low * t) + 0.1 * sin(2 * pi * omega_high * t)
# now, we try and filter out the higher-order frequency
alpha <- exp(-2 * pi * omega_high)
y <- low_pass_filter(x, alpha = 0.95)
plot(t, x, type = "l")
lines(t, y, col = "blue")
low_pass_filter <- function(x, alpha) {
y <- vector("numeric", length = length(x))
for (i in 2:length(x)) {
y[i] <- (1 - alpha) * x[i] + alpha * y[i - 1]
}
y
}
omega_low <- 1
omega_high <- 32
t <- seq(0, 1, length = 1000L)
x <- sin(2 * pi * omega_low * t) + 0.1 * sin(2 * pi * omega_high * t)
# now, we try and filter out the higher-order frequency
alpha <- exp(-2 * pi * omega_high)
y <- low_pass_filter(x, alpha = 0.95)
plot(t, x, type = "l")
lines(t, y, col = "blue")
alpha <- exp(-2 * pi * omega_high)
y <- low_pass_filter(x, alpha = 0.98)
plot(t, x, type = "l")
lines(t, y, col = "blue")
y <- low_pass_filter(x, alpha = 0.95)
plot(t, x, type = "l")
lines(t, y, col = "blue")
fft(x)
plot(fft(x))\
plot(fft(x))
x_hat <- fft(x)
summary(x)
summary(x_hat)
str(x_hat)
plot(x_hat)
plot(x_hat / (2 * pi))
x_hat / (2 * pi)
size(x)
dim(x_hat)
length(x_hat)
x_hat / (2 * pi * 1000)
plot(x_hat / (1000))
plot(x_hat / (2 * pi))
exp(0.2)
low_pass_filter <- function(x, alpha) {
y <- vector("numeric", length = length(x))
y[1] <- x[1]
for (i in 2:length(x)) {
y[i] <- (1 - alpha) * x[i] + alpha * y[i - 1]
}
y
}
high_pass_filter <- function(x, alpha) {
y <- vector("numeric", length = length(x))
y[1] <- x[1]
for (i in 2:length(x)) {
y[i] <- (1 + alpha) / 2 * (x[i] - x[i - 1]) + alpha * y[i - 1]
}
y
}
# set up the signal to be filtered
n <- 1024L
omega_low <- 1
omega_high <- 32
t <- seq(0, 1, length = n)
x <- sin(2 * pi * omega_low * t) + 0.1 * sin(2 * pi * omega_high * t)
# now, we try and filter out the higher-order frequency
alpha <- exp(-2 * pi * omega_high)
y_low <- low_pass_filter(x, alpha = 0.99)
y_high <- high_pass_filter(x, alpha = 0.99)
plot(t, x, type = "l")
lines(t, y_low, col = "blue")
print(abs(x - y_high))
impulse <- vector("numeric", length = n)
impulse[1] <- 1
low_pass_impulse <- low_pass_filter(impulse, alpha = 0.99)
plot(t, low_pass_impulse, type = "l")
freq_response <- fft(low_pass_impulse)
freq_response
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)))
impulse <- vector("numeric", length = n)
impulse[1] <- 1
low_pass_impulse <- low_pass_filter(impulse, alpha = 0.8)
plot(t, low_pass_impulse, type = "l")
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)))
j
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)), type = "l")
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)), type = "l")
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)), type = "l")
impulse <- vector("numeric", length = n)
impulse[1] <- 1
low_pass_impulse <- low_pass_filter(impulse, alpha = 0.8)
plot(t, low_pass_impulse, type = "l")
print(-log(0.8) / 2 * pi)
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)), type = "l")
print(log10(-log(0.8) / 2 * pi))
freq_response <- fft(low_pass_impulse)
plot(log10(seq(1:n)), 20 * log10(abs(freq_response)), type = "l")
?fft
setwd("/home/connor/Projects/20240306-r-learning/dotaplotr/")
devtools::test()
devtools::test_file("tests/testthat/test-read-data.R")
devtools::test_file("tests/testthat/test-read-data.R")
data.frame()
devtools::test_file("tests/testthat/test-read-data.R")
devtools::test_file("tests/testthat/test-read-data.R")
basic_df <- data.frame(
match_id = 0L, win = TRUE, kills = 0L, deaths = 0L, assists = 0L
)
class(basic_df)
library(stringr)
library(stringr)
dat <- fromJSON(file = "https://api.opendota.com/api/players/86745912/matches")
library(rjson)
dat <- fromJSON(file = "https://api.opendota.com/api/players/86745912/matches")
dat
lapply(dat, function(el) {el$match_id})
as.data.frame(lapply(dat, function(el) {el$match_id}))
lapply(dat, function(el) {el$match_id})
as.data.frame(lapply(dat, function(el) {list(match_id = el$match_id}))
lapply(dat, function(el) {list(match_id = el$match_id)})
l_test <- lapply(dat, function(el) {list(match_id = el$match_id)})
View(l_test)
l_test <- lapply(dat, function(el) {el$match_id})
l_test <- as.vector(lapply(dat, function(el) {el$match_id}))
unlist(dat)
d_test <- unlist(dat)
do.call(rbind.data.frame, dat)
do.call(rbind.data.frame, dat[[1:100]])
do.call(rbind.data.frame, dat[1:100])
do.call(rbind.data.frame, dat[1:100])
do.call(rbind.data.frame, dat)
do.call(length, dat)
Map(length, dat)
as.vector(Map(length, dat))
as.numeric(Map(length, dat))
sum(as.numeric(Map(length, dat)) > 15)
do.call(rbind.data.frame, dat)
sum(as.numeric(Map(length, dat)) == 16)
sum(as.numeric(Map(length, dat)) == 15
)
View(l_test)
\
do.call(rbind.data.frame, dat)
do.call(rbind.data.frame, dat[1:3000])
do.call(rbind.data.frame, dat[1:2000])
do.call(rbind.data.frame, dat[1:1000])
do.call(rbind.data.frame, dat[1:100])
do.call(rbind.data.frame, dat[1:200])
do.call(rbind.data.frame, dat[1:300])
do.call(rbind.data.frame, dat[1:400])
do.call(rbind.data.frame, dat[1:350])
do.call(rbind.data.frame, dat[1:325])
do.call(rbind.data.frame, dat[1:312])
do.call(rbind.data.frame, dat[1:318])
do.call(rbind.data.frame, dat[1:320])
do.call(rbind.data.frame, dat[1:315])
do.call(rbind.data.frame, dat[1:316])
do.call(rbind.data.frame, dat[1:317])
do.call(rbind.data.frame, dat[1:318])
dat[318]
dat[318]
dat[317]
NA
NULL + NA
NA
NULL + 0
NA + 0L
do.call(rbind.data.frame, dat[1:318]\)
?rbind.data.frame
dat[dat == NULL]
dat[1][dat[1] == NULL]
dat[1][dat[1] == NULL]
dat[1][dat[318] == NULL]
dat[318][dat[318] == NULL]
dat[318][dat[318]$average_rank]
dat[318]$average_rank == NULL
dat[318]$average_rank == NA
dat[318]$average_rank
is.na(dat[318]$average_rank)
is.null(dat[318]$average_rank)
dat
is.null(dat)
is.null(dat[1])
is.null(dat[1]$average_rank)
dat[1]$average_rank
dat[318]
len(dat[318])
length(dat[318])
length(dat[1])
length(dat[1])
length(dat[318])
length(dat[1])
length(dat[318])
dat[318]
?rbind.data.frame
dat[[318]]
length(dat[[318]])
length(dat[[1]])
do.call(rbind.data.frame, dat[1:318])
do.call(rbind.data.frame, dat[1:318])
length(dat[[1]])\
do.call(rbind.data.frame, dat[1:100])
do.call(rbind.data.frame, dat[1:300])
do.call(rbind.data.frame, dat[1:318])
install.packages("plyr")
plyr.rbind.fill(dat)
plyr::rbind.fill(dat)
lapply(dat, function(el) {as.data.frame(el)})
as.data.frame(dat[[1]])
do.call(rbind, dat)
df
dat_df <- do.call(rbind, dat)
dat_df <- do.call(rbind, dat)
as.data.frame(dat_df)
do.call
do.call
dat_df <- as.data.frame(do.call(rbind, dat))
dat_df
View(dat_df)
dat_df[[c("match_id", "player_slot")]]
dat_df[c("match_id", "player_slot")]
unique(dat_df$player_slot)
unique(dat_df$player_slot)
devtools::test()
?type
devtools::test()
typeof(dat_df)
dat_df
View(dat_df)
devtools::test()
?write.csv
%in%
in
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
dat_df
class(dat_df$match_id)
class(dat_df$lobby_type)
dat_df$match_id
dat_df$match_id[[1]]
class(dat_df$match_id[[1]])
dat_df
as.matrix(dat_df)
test <- as.data.frame(as.matrix(dat_df))
devtools::test()
class(dat_df$account_id)
test <- as.data.frame(as.matrix(dat_df))
test
test$duration
dat <- fromJSON(
file = str_glue("https://api.opendota.com/api/players/{account_id}/matches"))
dat_df <- as.data.frame(do.call(rbind, dat))
devtools::test()
dat
class(dat)
class(dat[[1]])
class(dat[[1]]$kills)
test <- do.call(rbind, dat)
test
View(test)
View(test)
class(test$account_id)
df <- do.call(rbind, lapply(dat, data.frame))
df <- do.call(rbind.data.frame(), lapply(dat, data.frame))
df <- do.call(rbind.data.frame, lapply(dat, data.frame))
devtools::test()
str(dat)
listHolder <- list(
row1 = list(name = "foo", surname = "bar", age = 90),
row2 = list(name = "foo", surname = "foo", age = 29),
row3 = list(name = "bar", surname = "foo", age = 45),
row4 = list(name = "bar", surname = "bar", age = 10)
)
str(listHolder)
lapply(dat, data.frame)
lapply(dat, as.data.frame)
lapply(dat[[1]], as.data.frame)
lapply(dat[[1]], data.frame)
lapply(dat, data.frame)
lapply(dat[1:10], data.frame)
lapply(dat[1:10], data.frame)
lapply(dat[1:100], data.frame)
lapply(dat[1:200], data.frame)
lapply(dat[1:317], data.frame)
lapply(dat[1:318], data.frame)
dat[[318]]
dat[[100]]
dat[[318\]]
dat[[318]]
devtools::test()
str(dat_matrix)
a <- matrix(seq(100), nrow = 10)
a
dim(a)
dim(dat_matrix)
data.frame(dat_matrix)
df <- data.frame(dat_matrix)
str(df)
str(iris)
str(dat_matrix)
devtools::test()
str(dat_matrix)
